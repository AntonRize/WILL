# -*- coding: utf-8 -*-
"""WILL_Geometry_COSMO_–_scale_derivation_from_κ²_=_2_3_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RwEjfJAli9G1rhlzry9ajH8KIatoWQxv
"""

#!/usr/bin/env python3
# -------------------------------------------------------------
# WILL Geometry – absolute-scale cosmology from κ² = 2/3
# Anton Rize – 12 Jul 2025
# Methodological transparency: every constant & step printed
# -------------------------------------------------------------

import mpmath as mp
mp.mp.dps = 50          # 50-decimal precision throughout

# CODATA-2022 exact or recommended values (SI units)
c_SI   = mp.mpf('299792458')                    # m s⁻¹
G_SI   = mp.mpf('6.67430') * mp.mpf('10')**-11  # m³ kg⁻¹ s⁻²
hbar_SI= mp.mpf('1.0545718176461565')*mp.mpf('10')**-34  # J s
kpc_SI = mp.mpf('3.0856775814913673') * mp.mpf('10')**19  # m
Mpc_SI = mp.mpf('1000') * kpc_SI
km_SI  = mp.mpf('1000')                     # m

# Empirical scale anchor: Planck-2018 TT+TE+EE+lowE
H0_kms_Mpc = mp.mpf('67.36')                # km s⁻¹ Mpc⁻¹
H0_SI      = H0_kms_Mpc * km_SI / Mpc_SI    # s⁻¹

# Geometry postulate (exact)
kappa_sq = mp.mpf('2') / mp.mpf('3')

print("=== WILL Geometry – scale derivation from κ² = 2/3 ===\n")
print(f"H0 (Planck-2018)          = {H0_kms_Mpc} km s⁻¹ Mpc⁻¹")
print(f"H0 (SI)                   = {H0_SI} s⁻¹\n")

# -----------------------------------------------------------
# 1.  Scale length
r_H = c_SI / H0_SI
print(f"Hubble radius r_H = c/H0          = {r_H} m")
print(f"                       = {r_H / Mpc_SI} Mpc")

# 2.  Schwarzschild radius of the Universe
R_s = kappa_sq * r_H
print(f"\nR_s (κ² r_H)               = {R_s} m")

# 3.  Total mass within r_H
M_U = (kappa_sq * c_SI**2 * r_H) / (mp.mpf('2') * G_SI)
print(f"Total mass M_U             = {M_U} kg")
print(f"                       = {M_U / mp.mpf('1.98847e30')} M_☉")

# 4.  Cosmological constant Λ
Lambda = kappa_sq / r_H**2
print(f"\nΛ = κ² / r_H²             = {Lambda} m⁻²")

# 5.  Vacuum energy density
rho_Lambda = Lambda * c_SI**2 / (mp.mpf('8') * mp.pi * G_SI)
print(f"ρ_Λ = Λ c² / (8πG)        = {rho_Lambda} kg m⁻³")
print(f"                       = {rho_Lambda / mp.mpf('1.602176634e-10')} GeV cm⁻³")

# 6.  Dimensionless density parameters
Omega_Lambda = kappa_sq
Omega_m      = mp.mpf('1') - Omega_Lambda
print(f"\nΩ_Λ                       = {Omega_Lambda}")
print(f"Ω_m                       = {Omega_m}")

# 7.  Cosmic age
t_0 = mp.mpf('1') / H0_SI
print(f"\nCosmic age t_0 = 1/H0     = {t_0} s")
print(f"                       = {t_0 / mp.mpf('3.1536e16')} Gyr")

print("\n=== All values derived from κ² = 2/3 + H0 (Planck-2018) ===")

