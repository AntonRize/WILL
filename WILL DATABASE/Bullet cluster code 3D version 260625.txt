# ================================================================
#  Bullet Cluster – WILL Geometry (high-resolution, tilted)
# ================================================================
import numpy as np, matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter
from scipy.integrate import trapezoid
np.set_printoptions(precision=3,suppress=True)

# ---------- 1. Physical constants & distance scale ---------------
G  = 4.30091e-6       # kpc km^2 s^-2 Msun^-1
Sigma_crit = 3.0e9    # Msun / kpc^2  (weak-lensing)

# code-unit ↔ physical conversion
L_unit = 20.0         # 1 code length = 20 kpc
M_unit = 1.0e14       # 1 code mass   = 1e14 Msun

# ---------- 2. Grid ----------------------------------------------
N, Lbox_k = 256, 2000              # ±2000 kpc
dx_k = 2*Lbox_k/N
dx = dx_k / L_unit
axis = (np.arange(N) - N/2)*dx
X,Y,Z = np.meshgrid(axis,axis,axis,indexing='ij')

# ---------- 3. Rotate grid by 8° around y -------------------------
theta = np.deg2rad(8)
Rx = X*np.cos(theta) + Z*np.sin(theta)
Ry = Y
Rz =-X*np.sin(theta) + Z*np.cos(theta)

# ---------- 4. Baryonic density ----------------------------------
# Markevitch+06 β-model gas (main+bullet)
beta = 0.704
rc_main_k, n0_main = 193, 1.90e-3   # kpc, cm^-3
rc_blt_k , n0_blt  = 129, 1.44e-2
kpc3_to_Msun = 1.14e9               # ρ_gas = μ mp n_e ; convert to Msun/kpc^3
rcm, rcb = rc_main_k/L_unit, rc_blt_k/L_unit
rho0m = n0_main*kpc3_to_Msun/M_unit
rho0b = n0_blt *kpc3_to_Msun/M_unit

offset = 400/L_unit                 # separation along +X

r_main = np.sqrt((Rx+offset/2)**2 + Ry**2 + Rz**2)
r_blt  = np.sqrt((Rx-offset/2)**2 + Ry**2 + Rz**2)
rho_gas = rho0m*(1+r_main**2/rcm**2)**(-1.5*beta)
rho_gas+= rho0b*(1+r_blt **2/rcb**2)**(-1.5*beta)

# Galaxy spheroids (Clowe+06)
def hernquist(r,M,a):
    return (M/M_unit)/(2*np.pi)* (a/L_unit) / (r*(r+a/L_unit)**3)
rho_gal = hernquist(r_main,1.0e14,150)+hernquist(r_blt,5.0e13,120)

rho_b = rho_gas + rho_gal

# ---------- 5. λ-field (shock sheet) ------------------------------
lam = np.ones_like(rho_b)
shock = (np.abs(Rz) < 50/L_unit) & (np.abs(Ry) < 200/L_unit) & (np.abs(Rx) < 600/L_unit)
lam[shock]=0.45

# ---------- 6. Multigrid Poisson solver (G=1, code units) ---------
def lap(u):
    return (np.roll(u,1,0)+np.roll(u,-1,0)+
            np.roll(u,1,1)+np.roll(u,-1,1)+
            np.roll(u,1,2)+np.roll(u,-1,2)-6*u)/dx**2

def gauss(u,f,it=3):
    for _ in range(it):
        u=(np.roll(u,1,0)+np.roll(u,-1,0)+np.roll(u,1,1)+np.roll(u,-1,1)+
           np.roll(u,1,2)+np.roll(u,-1,2)-dx**2*f)/6
    return u

def restrict(f):
    return 0.125*(f[::2,::2,::2]+f[1::2,::2,::2]+f[::2,1::2,::2]+f[::2,::2,1::2]+
                  f[1::2,1::2,::2]+f[1::2,::2,1::2]+f[::2,1::2,1::2]+f[1::2,1::2,1::2])

def prolong(f):
    g=np.zeros((f.shape[0]*2,)*3)
    for i in range(2):
        for j in range(2):
            for k in range(2):
                g[i::2,j::2,k::2]=f
    return g

def vcycle(u,f,lev=0,maxlev=4):
    u=gauss(u,f)
    if lev<maxlev:
        res=f-lap(u)
        uc = vcycle(np.zeros_like(restrict(res)), restrict(res), lev+1, maxlev)
        u += prolong(uc)
        u  = gauss(u,f)
    return u

def poisson(f,cyc=4):
    u=np.zeros_like(f)
    for _ in range(cyc): u=vcycle(u,f)
    return u-u.mean()

# ---------- 7. Onion iteration ------------------------------------
Phi = poisson(4*np.pi*rho_b,5)
for _ in range(4):
    grad=np.gradient(Phi,dx,edge_order=2)
    rho_geo=(grad[0]**2+grad[1]**2+grad[2]**2)/(8*np.pi)
    rhs=4*np.pi*(rho_b+lam*rho_geo)
    Phi=poisson(rhs,4)

# ---------- 8. Normalise Φ to gas mass inside 500 kpc -------------
r_phys = np.sqrt(Rx**2+Ry**2+Rz**2)*L_unit
mask = r_phys < 500
M_geo = rho_geo[mask].sum()*dx**3*M_unit
M_b   = rho_b  [mask].sum()*dx**3*M_unit
scale = M_b/(M_geo+1e-30)
rho_geo *= scale

# ---------- 9. κ map ---------------------------------------------
kappa = trapezoid(rho_geo, dx=dx, axis=2)*(M_unit/L_unit)/Sigma_crit
kappa = gaussian_filter(kappa, 1)

# ----- peak report -----
flat=np.argsort(kappa.ravel())[-2:]
coords=np.unravel_index(flat,kappa.shape)
for i,(ix,iy) in enumerate(zip(*coords[::-1]),1):
    print(f"peak {i}: x={axis[ix]*L_unit:.0f} kpc, "
          f"y={axis[iy]*L_unit:.0f} kpc, κ={kappa[ix,iy]:.3f}")

# ---------- 10. Plot ---------------------------------------------
extent=[axis[0]*L_unit,axis[-1]*L_unit]*2
plt.figure(figsize=(6,5))
plt.imshow(kappa.T,origin='lower',extent=extent,cmap='viridis')
plt.colorbar(label=r'$\kappa$')
plt.contour(kappa.T,levels=[0.02,0.04,0.06],colors='w',extent=extent)
plt.title('WILL Geometry κ-map (tilted, 256³)')
plt.xlabel('x [kpc]'); plt.ylabel('y [kpc]')
plt.tight_layout(); plt.show()


result:

peak 1: x=0 kpc, y=-188 kpc, κ=0.069
peak 2: x=0 kpc, y=-203 kpc, κ=0.058