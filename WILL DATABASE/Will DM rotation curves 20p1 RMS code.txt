# ============  WILL 3.1 : correct λ per geometry =====================
#  Works with table1.dat & table2.dat in /content/DATA
# ====================================================================

import pandas as pd, numpy as np, matplotlib.pyplot as plt
from scipy.integrate import cumulative_trapezoid

DATA = '/content/DATA'
META = f'{DATA}/table1.dat'
CURV = f'{DATA}/table2.dat'

# ---------- metadata -------------------------------------------------
meta = pd.read_fwf(
    META,
    colspecs=[(0,11),(12,14),(30,34),(56,61),(94,99),(100,106),(112,115)],
    names=['Galaxy','Morph','Incl','Rdisk','BT','Vflat','Qual']
)
meta['Morph'] = meta['Morph'].fillna('').astype(str).str.strip().str.lower()
for c in ['Incl','Rdisk','BT','Vflat','Qual']:
    meta[c] = pd.to_numeric(meta[c], errors='coerce')

EXCL = ['im','irr','pec','ib','int']
meta['unsuit'] = meta.apply(
    lambda r: (any(k in r['Morph'] for k in EXCL) or r['Incl']<30 or r['Qual']>2),
    axis=1
)

def geo_class(r):
    if r['unsuit']: return 'other'
    if r['Incl']>=70 and r['Vflat']>=180:
        bt = r['BT'] if not np.isnan(r['BT']) else 0.0
        return 'disc0' if bt<0.1 else 'disc1'
    return 'other'

meta['Class'] = meta.apply(geo_class, axis=1)
depth_map = {'disc0':0, 'disc1':1, 'other':5}
lambda_map = {'disc0':0.45, 'disc1':0.45, 'other':1.0}

# ---------- curves ---------------------------------------------------
curves = pd.read_table(
    CURV, sep=r'\s+', comment='#', header=None,
    usecols=[0,2,3,5,6,7],
    names=['Galaxy','r','Vobs','Vgas','Vdisk','Vbul']
)
num = ['r','Vobs','Vgas','Vdisk','Vbul']
curves[num] = curves[num].apply(pd.to_numeric, errors='coerce')
curves.dropna(subset=['r','Vobs'], inplace=True)

# ---------- solver ---------------------------------------------------
def will_v(df, depth, lam):
    vb_sq = df['Vgas']**2 + df['Vdisk']**2 + df['Vbul']**2
    v_sq  = vb_sq.copy()
    if depth==0:
        return np.sqrt(np.clip(v_sq,0,None))
    nz = df['r']>0
    for _ in range(depth):
        integ = cumulative_trapezoid(v_sq, df['r'], initial=0.0)
        geom  = np.zeros_like(v_sq)
        geom[nz] = lam*integ[nz]/df.loc[nz,'r']
        v_sq = vb_sq + geom
    return np.sqrt(np.clip(v_sq,0,None))

# ---------- run catalogue --------------------------------------------
rows=[]
for gal,gdf in curves.groupby('Galaxy'):
    cls   = meta.loc[meta['Galaxy']==gal,'Class'].values[0]
    depth = depth_map[cls]
    lam   = lambda_map[cls]
    if len(gdf)<3: continue
    rmse = np.sqrt(np.mean(
        (gdf['Vobs'] - will_v(gdf.sort_values('r'),depth,lam))**2))
    rows.append({'Galaxy':gal,'Class':cls,'Depth':depth,'RMSE':rmse})

df = pd.DataFrame(rows).set_index('Galaxy').sort_values('RMSE')

# ---------- report ---------------------------------------------------
print("\n=====  WILL 3.1 : λ-corrected adaptive depth =====")
print(f"Galaxies analysed : {len(df)}")
print(f"Median RMSE [km/s]: {df.RMSE.median():.2f}")
print(f"90-th pct RMSE    : {df.RMSE.quantile(0.9):.2f}\n")
display(df.head(20))

plt.figure(figsize=(6.5,4))
plt.hist(df.RMSE,bins=np.arange(0,200,10),edgecolor='k',alpha=0.8)
plt.axvline(df.RMSE.median(),ls='--',lw=2,c='k',
            label=f"Median = {df.RMSE.median():.1f} km/s")
plt.xlabel('RMSE  [km s⁻¹]'); plt.ylabel('Number of Galaxies')
plt.title('WILL 3.1 : RMSE distribution')
plt.legend(); plt.grid(alpha=0.3); plt.tight_layout(); plt.show()





result:



=====  WILL 3.1 : λ-corrected adaptive depth =====
Galaxies analysed : 175
Median RMSE [km/s]: 20.12
90-th pct RMSE    : 175.93

Class	Depth	RMSE
Galaxy			
UGCA281	other	5	1.175924
UGC04483	other	5	1.386352
UGC07866	other	5	1.545150
UGC05414	other	5	1.631349
UGC07559	other	5	1.731612
UGC04499	other	5	2.246902
UGC08490	other	5	2.400484
F583-4	other	5	2.711779
KK98-251	other	5	3.097666
UGC06917	other	5	3.371502
UGC07232	other	5	3.508100
UGC05986	other	5	3.562535
NGC2366	other	5	3.678660
F567-2	other	5	4.165085
UGC08837	other	5	4.429278
NGC1705	other	5	4.504781
UGC07577	other	5	4.636307
DDO161	other	5	4.786654
UGC05721	other	5	4.891677
NGC0055	other	5	5.365472
